/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Hotel.gui;

import ConexaoBD.Conexao;
import Hotel.DAO.HospedesDAO;
import Hotel.DTO.HospedesDTO;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author luizg
 */
public class TelaHospedes extends javax.swing.JFrame {


/**
     * Creates new form Hospedes
     */
    public TelaHospedes() {
    initComponents();
    try {
        Connection conexao = new Conexao().getConnection(); // Obtendo conexão
        new HospedesDAO(conexao); // Passando a conexão para o DAO
        listarHospedes(); // Chamando o método para listar os hóspedes
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao conectar ao banco: " + e.getMessage());
    }
}


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtSexo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDataNascimento = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtCpf = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtTelefone = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblHospedes = new javax.swing.JTable();
        CadastrarButton = new javax.swing.JButton();
        AtualizarButton = new javax.swing.JButton();
        ExcluirButton = new javax.swing.JButton();
        CarregarButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 51, 0));

        jPanel1.setBackground(new java.awt.Color(204, 51, 0));
        jPanel1.setForeground(new java.awt.Color(153, 51, 0));

        jLabel1.setFont(new java.awt.Font("Calibri", 0, 36)); // NOI18N
        jLabel1.setText("Hospedes");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel2.setText("Nome");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel3.setText("Sexo");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel4.setText("Data de Nascimento");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel5.setText("CPF");

        jLabel6.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel6.setText("Telefone");

        jLabel7.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        jLabel7.setText("Email");

        tblHospedes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblHospedes.setModel(new DefaultTableModel(     new Object[][]{},      new String[]{"Nome", "CPF", "DataNascimento", "Telefone", "Email", "Sexo"} ));
        tblHospedes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHospedesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblHospedes);

        CadastrarButton.setText("Cadastrar");
        CadastrarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CadastrarButtonActionPerformed(evt);
            }
        });

        AtualizarButton.setText("Atualizar");
        AtualizarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AtualizarButtonActionPerformed(evt);
            }
        });

        ExcluirButton.setText("Excluir");
        ExcluirButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExcluirButtonActionPerformed(evt);
            }
        });

        CarregarButton.setText("Carregar Campos");
        CarregarButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CarregarButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(CadastrarButton)
                        .addGap(18, 18, 18)
                        .addComponent(AtualizarButton)
                        .addGap(29, 29, 29)
                        .addComponent(ExcluirButton)
                        .addGap(18, 18, 18)
                        .addComponent(CarregarButton)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(txtSexo, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                                        .addGap(42, 42, 42)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtDataNascimento, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                                        .addGap(191, 191, 191))
                                    .addComponent(txtTelefone, javax.swing.GroupLayout.DEFAULT_SIZE, 650, Short.MAX_VALUE)
                                    .addComponent(txtCpf)
                                    .addComponent(txtNome)
                                    .addComponent(txtEmail))))
                        .addContainerGap())))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtNome))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtSexo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel4))
                    .addComponent(txtDataNascimento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCpf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTelefone)
                    .addComponent(jLabel6))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel7)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CadastrarButton)
                    .addComponent(AtualizarButton)
                    .addComponent(ExcluirButton)
                    .addComponent(CarregarButton))
                .addGap(18, 18, 18))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AtualizarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AtualizarButtonActionPerformed
      try {
          atualizarHospede();
      } catch (SQLException ex) {
          Logger.getLogger(TelaHospedes.class.getName()).log(Level.SEVERE, null, ex);
      }
        listarHospedes();
        limparCamposHospede();
    }//GEN-LAST:event_AtualizarButtonActionPerformed

    private void ExcluirButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExcluirButtonActionPerformed

        excluirHospede();
        listarHospedes();
        limparCamposHospede();
    }//GEN-LAST:event_ExcluirButtonActionPerformed

    private void CarregarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CarregarButtonActionPerformed
        carregarCampos();
    }//GEN-LAST:event_CarregarButtonActionPerformed

    private void CadastrarButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CadastrarButtonActionPerformed
        cadastrarHospedes();
    }//GEN-LAST:event_CadastrarButtonActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    private void tblHospedesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHospedesMouseClicked
          int selectedRow = tblHospedes.getSelectedRow();
    System.out.println("📌 Linha clicada: " + selectedRow);

    }//GEN-LAST:event_tblHospedesMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaHospedes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaHospedes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaHospedes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaHospedes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TelaHospedes().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AtualizarButton;
    private javax.swing.JButton CadastrarButton;
    private javax.swing.JButton CarregarButton;
    private javax.swing.JButton ExcluirButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblHospedes;
    private javax.swing.JTextField txtCpf;
    private javax.swing.JTextField txtDataNascimento;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtNome;
    private javax.swing.JTextField txtSexo;
    private javax.swing.JTextField txtTelefone;
    // End of variables declaration//GEN-END:variables
private void cadastrarHospedes() {
    // Capturando os dados do textField
    String nome = txtNome.getText();
    String cpf = txtCpf.getText().trim();
    String telefone = txtTelefone.getText().trim();
    String email = txtEmail.getText().trim();
    String sexo = txtSexo.getText().trim();
    String dataNascimento = txtDataNascimento.getText().trim();

    if (cpf.isEmpty() || telefone.isEmpty() || nome.isEmpty()) {
        JOptionPane.showMessageDialog(null, "❌ Preencha todos os campos obrigatórios!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    try {
        // Criando o objeto HospedeDTO
        HospedesDTO novoHospede = new HospedesDTO(nome, cpf, dataNascimento, telefone, email, sexo);
        
        System.out.println("Dados capturados do formulario: " + novoHospede.toString());

        // Query SQL para inserir o hóspede
        String query = "INSERT INTO hospedes (nome, cpf, telefone, email, sexo, dataNascimento) VALUES (?, ?, ?, ?, ?, ?)";

        // Executa o comando SQL usando o método da classe Conexao
        boolean sucesso = Conexao.executarComandoSQL(query, nome, cpf, telefone, email, sexo, dataNascimento);

        if (sucesso) {
            JOptionPane.showMessageDialog(null, "Hóspede cadastrado com sucesso.");
            listarHospedes(); // Atualiza a tabela
            limparCamposHospede();
        } else {
            JOptionPane.showMessageDialog(null, "Erro ao cadastrar hóspede.", "Erro", JOptionPane.ERROR_MESSAGE);
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao cadastrar hóspede: " + e.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private void atualizarHospede() throws SQLException {
    int selectedRow = tblHospedes.getSelectedRow(); // 🔹 Obtém a linha selecionada
    System.out.println("📌 Tentando atualizar... Linha selecionada: " + selectedRow);

    if (selectedRow == -1) {  // Se nenhuma linha estiver selecionada, exibe erro
        JOptionPane.showMessageDialog(null, "❌ Nenhum hóspede foi selecionado!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtém o CPF do hóspede selecionado
    String cpfHospedeSelecionado = (String) tblHospedes.getValueAt(selectedRow, 1); // Coluna 1 = CPF
    System.out.println("📌 CPF do hóspede selecionado: " + cpfHospedeSelecionado);

    if (cpfHospedeSelecionado.isEmpty()) {
        JOptionPane.showMessageDialog(null, "CPF do hóspede inválido.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtém os dados dos campos
    String nome = txtNome.getText();
    String cpf = txtCpf.getText();
    String telefone = txtTelefone.getText();
    String email = txtEmail.getText();
    String sexo = txtSexo.getText();
    String dataNascimento = txtDataNascimento.getText();

    if (nome.isEmpty() || cpf.isEmpty() || telefone.isEmpty() || email.isEmpty() || sexo.isEmpty() || dataNascimento.isEmpty()) {
        JOptionPane.showMessageDialog(null, "❌ Preencha todos os campos!", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // SQL para atualizar o hóspede
    String query = "UPDATE hospedes SET nome = ?, cpf = ?, telefone = ?, email = ?, sexo = ?, dataNascimento = ? WHERE cpf = ?";

    boolean sucesso = Conexao.executarComandoSQL(query, nome, cpf, telefone, email, sexo, dataNascimento, cpfHospedeSelecionado);

    if (sucesso) {
        JOptionPane.showMessageDialog(null, "✅ Hóspede atualizado com sucesso.");
        listarHospedes();  // Atualiza a tabela
    } else {
        JOptionPane.showMessageDialog(null, "❌ Erro ao atualizar o hóspede.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private void excluirHospede() {
    int selectedRow = tblHospedes.getSelectedRow(); // Obtém a linha selecionada

    if (selectedRow == -1) {  // Verifica se um hóspede foi selecionado
        JOptionPane.showMessageDialog(null, "Selecione um hóspede para excluir.", "Erro", JOptionPane.ERROR_MESSAGE);
        return;
    }

    // Obtém o CPF do hóspede selecionado
    String cpfHospedeSelecionado = (String) tblHospedes.getValueAt(selectedRow, 1); // Coluna 1 = CPF
    System.out.println("CPF do hóspede a excluir: " + cpfHospedeSelecionado);  // 🔥 Debug

    String query = "DELETE FROM hospedes WHERE cpf = ?";

    // Chama o método do ConexaoDAO para executar a exclusão
    boolean sucesso = Conexao.executarComandoSQL(query, cpfHospedeSelecionado);

    if (sucesso) {
        JOptionPane.showMessageDialog(null, "Hóspede excluído com sucesso.");
        listarHospedes();  // Atualiza a lista de hóspedes
    } else {
        JOptionPane.showMessageDialog(null, "Erro ao excluir o hóspede.", "Erro", JOptionPane.ERROR_MESSAGE);
    }
}

private void listarHospedes() {
    try {
        String query = "SELECT * FROM hospedes";
        
        // Usando a classe Conexao para obter a conexão
        try (Connection conn = new Conexao().getConnection(); // Obtém a conexão
             PreparedStatement pst = conn.prepareStatement(query);
             ResultSet rs = pst.executeQuery()) {

            DefaultTableModel model = (DefaultTableModel) tblHospedes.getModel();
            model.setNumRows(0); // Limpa a tabela antes de adicionar novos dados

            while (rs.next()) {
                Object[] rowData = {
                    rs.getString("nome"),
                    rs.getString("cpf"),
                    rs.getString("dataNascimento"),
                    rs.getString("telefone"),
                    rs.getString("email"),
                    rs.getString("sexo")
                };
                model.addRow(rowData);
            }
            tblHospedes.repaint(); // Atualiza a tabela
            tblHospedes.revalidate();
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(null, "Erro ao carregar os hóspedes: " + e.getMessage());
    }
}

private void carregarCampos() {
    int selectedRow = tblHospedes.getSelectedRow();
    if (selectedRow != -1) {
        txtNome.setText(tblHospedes.getValueAt(selectedRow, 0).toString());
        txtCpf.setText(tblHospedes.getValueAt(selectedRow, 1).toString());
        txtDataNascimento.setText(tblHospedes.getValueAt(selectedRow, 2).toString());
        txtTelefone.setText(tblHospedes.getValueAt(selectedRow, 3).toString());
        txtEmail.setText(tblHospedes.getValueAt(selectedRow, 4).toString());
        txtSexo.setText(tblHospedes.getValueAt(selectedRow, 5).toString());
        
        
    } else {
        System.out.println("Nenhum hóspede selecionado.");
    }
}

private void limparCamposHospede() {
    txtNome.setText(null);
    txtCpf.setText(null);
    txtDataNascimento.setText(null);
    txtTelefone.setText(null);
    txtEmail.setText(null);
    txtSexo.setText(null);
    txtNome.requestFocus();  
} }